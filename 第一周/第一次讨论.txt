--Q1.实现什么编程语言
python:优点是脚本语言，语法比较简单
            好像没什么缺点，一定要说的话就是代码块是通过4个空格来区分的，这个对语法分析来说有点小挑战
>>>x=1.5



shell：命令行的编程语言，做完了以后会比较炫酷（有用），语法也蛮简单的

makefile：也是比较有用，但是可能不太好写，也有点偏题

C语言: 优点是比较熟悉?但是C的声明语句还是挺有挑战性的

Java：面向对象。。比较有挑战性










--Q2.用什么语言来写---------------------------------------------------------
Java 
javacc 编译


Python？







--Q3大概有几个部分-----------------------------------------------------

a.编译部分：主要做的工作是把一条语句翻译成抽象语法树

例：给你一个字符串"x = 2 + 1", 需要返回形如这样的一个树
		=
	              /    \
	           x        +
		   /   \
	                  2     1


当然了，这个树的每一个节点上面都会有很多[属性]，比如你要指明=是一个运算符，x是一个变量，1是一个数字，诸如此类
同时编译的时候就会涉及到错误处理（编译时错误），这样的错误主要是因为输入的语句不合法，比如说 “x = x+-1”这样的



b. 执行部分：编译部分完成以后，执行部分就会根据编译给的抽象语法树的信息来真正“执行”这条语句

例：对于"x = 2 + 1"的语法树，其实执行部分最主要的工作就是实现“=”赋值运算符，以及“+”加法运算符
要实现这些运算符，我们需要定义一些基础的数据结构

比如我们可以这样定义每一个数据：
class Item {
     type;   //类型 int  name
     value; //值     1    x
}

然后我们需要一个符号表，每当有一个赋值语句，我们就往符号表里添加一个元素，

比如x = 2 + 1是第一条语句的话，那它运行前是这样：
符号表：{}

运行后是这样：
符号表:  {x:3}

再运行 y = x + 1
符号表: {x:3, y: 4}

这个模块是最重要的，到完成时大约实现的有：
（1）定义数据类型，就类似上面的Item
（2）实现基本运算符（四则运算，赋值就差不多了）
（3）实现if语句
（4）实现while语句
（5）实现函数




c.集成开发环境的开发

这个其实是实现一个类似dev c++的东西，完成两个功能：
（1）文本编辑器，我们可以在里面写代码（代码高亮什么的都可以不要），但是文件的打开/关闭/保存/另存为是必须的
（2）调试器，就是写完了代码，点击运行按钮，我们就自动调用我们的编译器+执行器，对文件里的程序一条一条地执行，然后把执行的结果（print，报错）显示在一个终端里
***********************************************************************************************************************************************************
打开| 新建 | 保存 | 另存为|运行
************************************************************************************************************************************************************	x = 1								*2
x = x + 1								*2
for i in range(3):							*2
    print(x)	 							*
								*程序顺利执行完成！
								*
								*        
								*
								*
								*
								*
								*                                                                                                           
								*
								*
								*                                                                                                           *************************************************************************************************************************************************************                
另一种思路：我们接触过很多其他的代码编辑器，比如visual studio，jupyter notebook, 也可以写一个插件，让这些编辑器支持我们的编程语言

                                                                                                                                                                                               
--Q4.怎么分工
我对一开始的想法：先做一个最简单的demo，让我们的编程语言能够跑通x  = 1，这样其实就有一个初步的框架，然后再开始各个部分的开发。

具体的分工，我想到的方案
一.按模块的分配
a.编译部分（1人）
b.执行部分（2人）
c.集成环境开发（1人）


二.更着重于执行的分配方案
实现数据类型+符号表+基本运算（1人）
实现条件语句和循环（1人）
实现函数（1人）



实现编译部分（1人，他负责按照给上面三个人提供一致的抽象语法树）











